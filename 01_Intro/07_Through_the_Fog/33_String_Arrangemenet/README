Given an array of equal-length strings, you'd like to know if it's possilbe to
rearrange the order of the elements in such a way that each consecutive pair
of strings differ exactly by one character. Return true if it's possible, and 
false if not.

NOTE: You're only rearranging the order of the strings, not the order of the
      letters withing the strings!

- Example
  For inputArray = ["aba", "bbb", "bab"], the output should be
  stringsRearrangement(inputArray) = false;

  There are 6 possible arrangements for theses strings:
    - ["aba", "bbb", "bab"]
    - ["aba", "bab", "bbb"]
    - ["bbb", "aba", "bab"]
    - ["bbb", "bab", "aba"]
    - ["bab", "bbb", "aba"]
    - ["bab", "aba", "bbb"]

    None of these satisfy the condition of consecutive strings differing by 
    1 character, so the answer is false.

  For inputArray = ["ab", "bb", "aa"], the output should be
  stringsRearrangement(inputArray) = true;

  It's possilbe to arrange these strings in a way that each consecutive
  pair of strings differ by 1 character 
    - ["aa", "ab", "bb"] OR 
    - ["bb", "ab", "aa"]
  so return true

- Input / Output 
  - [execution time limit] 0.5 sec (cpp)

  - [input] array.string inputArray
    vector<string> C Plus Plus
    A non-empty array of strings of lowercase letters
    Guaranteed Constraints:
      2 <= inputArray.length <= 10
      1 <= inputArray[i.length] <= 15

  - [outpt] boolean
    return true if the strings can be reordered in such a way that each 
    neighbouring pair of strings differ by exactly one character,
    otherwise return false