Picture a map of a battlefield divided into two halves. Points which lie to the
left of the line x = 0 are on the forest free side, while points which lie on
or to the right of the line are in the forest.

Your army needs to get from point a to point b. The problem is that while 
point a is located on the forest free side where your army's speed is 
v1 miles per hour, point b is located in the forest, where your speed
is reduced to v2 miles per hour.

Caluclate the shortest possible travel time for your army to reach 
point b.

Example 01
  a: [-1.5, 0.5]
  b: [1.5, 1.5], 
  v1: 4.4
  v2: 1.1
  ArmyMarch(a, b, v1, v2) =  1.761942
  The optimal route is A(-1.5, 0.5) --> (0, 1.31899) --> B(1.5, 1.5)

Example 02
  a: [-1.0001, 0.00001]
  b: [0.00001, 0.00001]
  v1: 1.5
  v2: 1.3
  ArmyMarch(a, b, v1, v2) =  0.666741025641

Example 03
  a: [-2.2, 3.3]
  b: [5.1, 0.9]
  v1: 2.1
  v2: 1.3
  ArmyMarch(a, b, v1, v2) =  5.21889915791

Example 04
  a: [-5.67812, -4.23919]
  b: [5.12323, 6.92375]
  v1: 2.89
  v2: 1.3
  ArmyMarch(a, b, v1, v2) =  7.95977048008

Input/Output 
  [input] array.float a 
    Array of two floats representing coordinates for point a in miles.
     It is guaranteed that a[0] < 0

  Guaranteed constraints:
    -25.0 <= a[i] <= 35

  [input] array.float b
    Array of two floats representing coordinates for point b in miles.
    It is guaranteed that b[0] >= 0

  Guaranteed constraints:
    -25.0 <= b[i] <= 35.0